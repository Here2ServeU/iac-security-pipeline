import matplotlib.pyplot as plt
from openai import OpenAI
from dotenv import load_dotenv
import os
from datetime import datetime

# Load environment variables from .env file
load_dotenv()

# Simulated scan results (you could parse actual JSON in a real implementation)
scan_summary = {
    "Checkov": {"Critical": 3, "High": 4, "Medium": 3, "Low": 2},
    "Trivy": {"Critical": 5, "High": 10, "Medium": 7, "Low": 4},
    "Gitleaks": {"Critical": 1, "High": 1, "Medium": 1, "Low": 0},
    "AI Best Practices": {"Critical": 2, "High": 1, "Medium": 1, "Low": 1}
}

# Write the AI-generated markdown report
date_today = datetime.now().strftime("%Y-%m-%d")
with open("ai-security-analysis.md", "w") as f:
    f.write(f"# AI-Powered DevSecOps Summary Report\n\n")
    f.write(f"**Scan Date:** {date_today}  \n")
    f.write(f"**Pipeline Trigger:** GitHub Pull Request  \n")
    f.write(f"**Environment:** IaC Security Pipeline for T2S\n\n")
    f.write("## Findings Summary\n\n")
    f.write("| Scan Tool   | Category        | Total Issues | Critical | High | Medium | Low |\n")
    f.write("|-------------|------------------|--------------|----------|------|--------|-----|\n")

    for tool, levels in scan_summary.items():
        total = sum(levels.values())
        f.write(f"| {tool:<11} | {'Auto':<16} | {total:<12} | {levels['Critical']}        | {levels['High']}    | {levels['Medium']}      | {levels['Low']}   |\n")

    f.write("\n---\n\n")
    f.write("## AI Recommendations\n\n")
    f.write("- Use least privilege IAM policies for Terraform resources.\n")
    f.write("- Rebuild Docker images with minimal base layers (e.g., `alpine`).\n")
    f.write("- Replace secrets in source control with secret managers like AWS Secrets Manager.\n")
    f.write("- Add CI fail conditions on Critical and High vulnerabilities.\n")
    f.write("- Enhance developer training using alerts and remediation templates.\n\n")
    f.write("*Generated by OpenAI Advisor â€” Secure by Design.*\n")

# Create diagram
categories = list(scan_summary.keys())
critical = [scan_summary[cat]["Critical"] for cat in categories]
high = [scan_summary[cat]["High"] for cat in categories]
medium = [scan_summary[cat]["Medium"] for cat in categories]
low = [scan_summary[cat]["Low"] for cat in categories]

bar_width = 0.2
x = range(len(categories))

fig, ax = plt.subplots(figsize=(10, 6))
ax.bar([i - 1.5 * bar_width for i in x], critical, width=bar_width, label='Critical')
ax.bar([i - 0.5 * bar_width for i in x], high, width=bar_width, label='High')
ax.bar([i + 0.5 * bar_width for i in x], medium, width=bar_width, label='Medium')
ax.bar([i + 1.5 * bar_width for i in x], low, width=bar_width, label='Low')

ax.set_xticks(x)
ax.set_xticklabels(categories)
ax.set_ylabel("Issue Count")
ax.set_title("DevSecOps Scan Results Overview")
ax.legend()

plt.tight_layout()
plt.savefig("devsecops_scan_results.png")
